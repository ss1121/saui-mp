
var templates = [
  'audio',
  'button',
  'camera',
  'canvas',
  'checkbox',
  'icon',
  'image',
  'input',
  'liveplayer',
  'livepusher',
  'map',
  'navigator',
  'progress',
  'radio',
  'richtext',
  'slider',
  'switch',
  'text',
  'textarea',
  'video',
  'view',

  // 不一样的解析模板
  'swiper',
  'form',
  'label',
  'coverview',
  'coverimage'
]

function isString(title){
  return typeof title == 'string'
}

function objTypeof(obj) {
  if (obj) return obj.constructor.toLowerCase()
}

function isObject(obj) {
  return objTypeof(obj) == 'object'
}

function isArray(obj) {
  return objTypeof(obj) == 'array'
}

function isNumber(obj) {
  return objTypeof(obj) == 'number'
}

function isFunction(obj) {
  return objTypeof(obj) == 'function'
}

function delItem(ary, target) {
  const willAry = []
  ary.forEach(item => {
    if (item !== target) {
      willAry.push(item)
    }
  })
  return willAry
}

function sClone(obj) {
  if (obj) {
    return JSON.parse(JSON.stringify(obj))
  }
}

// 简单数组去重，只针对字符串，数字
// function unique(arr) {
//   return arr.reduce((prev, cur) => prev.includes(cur) ? prev : [...prev, cur], []);
// }

function log(what){
  console.log('========= log what')
  console.log(JSON.stringify(what))
}

function mergeItemEvent(key, props, item) {
  return item[key] || props[key] || ''
}

function equal(item, equalwhat){
  if (item.title ==  equalwhat) {
    console.log(item)
  }
}

function getItemClass(item) {
  // var cItemClass = (item.itemClass || item.class || item.className || 'class-name')
  var cItemClass = (item.itemClass || item.class || item.className)
  return cItemClass ? 'item '+cItemClass : 'item'
}

function getItemStyle(item) {
  var cItemStyle = (item.itemStyle||item.style)
  return cItemStyle ? cItemStyle : ''
}


function existTemp(item, excludeTmp) {
  var tmpName = ''
  var _tmpName
  var noopRet = {
    temp: 'noop',
    data: {}
  }
  for (var ii = 0; ii < templates.length; ii++) {
    var tmp = templates[ii]
    if (item[tmp]) {
      tmpName = tmp
    }
  }

  if ((isString(excludeTmp) && tmpName)) {
    if (tmpName == excludeTmp) return noopRet
  }

  _tmpName = tmpName
  var data = item[tmpName]

  switch (tmpName) {
    case 'label':
      tmpName = 'parse-label'
      data = item
      break;
    case 'form':
      tmpName = 'parse-form'
      data = item
      break;
    case 'swiper':
      tmpName = 'parse-swiper'
      data = item
      break;
  }

  return tmpName ? {
    temp: tmpName,
    data: data
  } : noopRet
}

function resetTitleArray(titles) {
  return titles.map(function(tit) {
    if (isString(tit)) {
      return tit
      // return {title: tit, uniqueKey: suid('parseTitle_')}
    }
    if (isObject(tit)) {
      tit.uniqueKey = suid('parseTitle_')
      return tit
    }
  })
  
}

function customCustom(item, key, attrName) {
  var comp = item[key]
  var compOption = comp && comp.option || {}
  var compChildren = comp && comp.children || []

  if (attrName) {
    return compOption[attrName]
  }
  if (isArray(comp)) {
    return {
      option: compOption,
      children: comp
    }
  }
  if (isObject(comp)) {
    return {
      option: compOption,
      children: compChildren
    }
  }
}

function customScrollView(item, attrName) {
  return customCustom(item, 'scroll', attrName)
}

function customSwiperView(item, attrName) {
  return customCustom(item, 'swiper', attrName)
}

function customLabelrView(item, attrName) {
  return customCustom(item, 'label', attrName)
}

function customMoveView(item, attrName) {
  return customCustom(item, 'movearea', attrName)
}

function customForm(item, attrName) {
  return customCustom(item, 'form', attrName)
}

function customPicker(item, attrName) {
  return customCustom(item, 'picker', attrName)
}

function customPickerView(item, attrName) {
  return customCustom(item, 'pickerview', attrName)
}

function customView(item, attrName) {
  return customCustom(item, 'view', attrName)
}

function customCoverView(item, attrName) {
  return customCustom(item, 'coverview', attrName)
}

function dataOptions(item) {
  if (item && item['data-options']) {
    var opts = item['data-options']
    return JSON.stringify(opts)
  }
  return ''
}

var innerCount = -1
function suid(prefix) {
  innerCount++
  if (typeof prefix == 'string') {
    return prefix + innerCount
  } else {
    return '_' + innerCount
  }
}

var lev = 0
function recursiveNo(level) {
  if ((level&&level<8) || level == 0) {
    return ++lev
  } else {
    if (lev >= 8) {
      console.log('超出最大允许递归数-8')
      return false
    }
    return ++lev
  }
}

function getRecursiveNo(prefix, curnumber) {
  if (lev || lev == 0) {
    return true
  }
}

function useRecursiveNo(prefix, curnumber) {
  let loopNo = recursiveNo()
  if (loopNo) {
    curNo = loopNo
    if (isString(prefix)) return prefix + loopNo
  } else {
    return loopNo
  }
}

function clearLevel(){
  lev = 0
  used_lev = []
}

function hasEvent(props, key) {
  if (props) {
    if (key == 'tap') {
      return (props.tap || props.catchtap) ? true : false
    }
    else if (key == 'longtap') {
      return (props.longtap || props.catchlongtap) ? true : false
    }
    else if (key == 'longpress') {
      return (props.longpress || props.catchlongpress) ? true : false
    }
    else {
      return props[key] ? true : false
    }

  }
}

function dataset(item, key) {
  if (item && item.attr && isObject(item.attr)) {
    if (key) {
      if (item.attr[key] || item.attr[key]==0) {
        // return item.attr[key]
        return true
      }
    } else {
      return item.attr['id'] || item.attr['data-id'] || 0
    }
  } else {
    return ''
  }
}

function setItemClass(item, precls, aftcls) {
  if (newcls) {
    if (precls) {
      item.class = item.class ? precls + ' ' + item.class : precls
    }

    if (aftcls) {
      item.class = item.class ? item.class + ' ' + aftcls : aftcls
    }
  }
  return item
}

function dataEvt(item, selects) {
  var evtStr = ''
  if (selects && isArray(selects)) {
    selects.forEach(function(evtName, ii) {
      if (item[evtName]) {
        if ((ii+1)==selects.length) {
          evtStr += evtName+'='+item[evtName]
        } else {
          evtStr += evtName+'='+item[evtName] + ','
        }
      }
    })
  }
  return evtStr
}

function getClass(item, prefix){
  prefix = prefix || 'htitle'
  item = item || {}
  var myClass = prefix
  if (item) {
    var _class = item.class || item.className || item.itemClass
    myClass =  _class ? prefix+' '+_class : prefix
  }
  return myClass
}

module.exports = {
  hasEvent,
  dataset,
  getRecursiveNo,
  useRecursiveNo,
  recursiveNo,
  setItemClass,
  dataEvt,
  getClass,

  isString: isString,
  isObject: isObject,
  isArray: isArray,
  log: log,
  clearLevel:  clearLevel,
  resetTitleArray: resetTitleArray,
  csv: customScrollView,
  cswv: customSwiperView,
  csmv: customMoveView,
  cform: customForm,
  clabel: customLabelrView,
  cpicker: customPicker,
  cpickerv: customPickerView,
  cview: customView,
  ccview: customCoverView,
  existTemp: existTemp,
  getItemClass: getItemClass,
  getItemStyle: getItemStyle,
  mergeItemEvent: mergeItemEvent,
  dataOptions: dataOptions,

  isFunction: isFunction,
  isNumber: isNumber,
  sClone: sClone,
  delItem: delItem
}
